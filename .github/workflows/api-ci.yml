name: API CI  # Ciclo de integración continuo de nuestra API

on:
  push:
    paths:
      - "api/**"
      - ".github/workflows/api-ci.yml"

defaults:
  run:
    working-directory: ./api  # Ajusta según dónde esté tu package.json

jobs:
  # ------------------------------
  # 1️⃣ Linter (Linux)
  # ------------------------------
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: 👍 Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🌸 Fix ESLint issues
        run: npm run lint:fix || true  # Arregla automáticamente, pero no falla

      - name: 🌹 Run ESLint (show errors, no fail)
        run: npm run lint || true      # Muestra errores restantes, no rompe el job

  # ------------------------------
  # 2️⃣ Unit Test (Linux)
  # ------------------------------
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: 👍 Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🧪 Run Unit Tests
        run: npm run test

  # ------------------------------
  # 3️⃣ E2E (Linux + Docker MongoDB)
  # ------------------------------
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: 👍 Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📥 Install Dependencies
        run: npm ci

      # 🔹 Levantar MongoDB con Docker
      - name: 🐳 Start MongoDB Docker
        run: |
          docker run -d --name mongo-test -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=test \
            -e MONGO_INITDB_ROOT_PASSWORD=test123 \
            -e MONGO_INITDB_DATABASE=demo_e2e \
            mongo:6.0
          sleep 10  # Espera que MongoDB esté listo

      # 🔹 Ejecutar pruebas E2E
      - name: 🌐 Run E2E Tests
        run: npm run test:e2e
        env:
          MONGO_DB_NAME: demo_e2e
          MONGO_URL: mongodb://test:test123@localhost:27017/demo_e2e?authSource=admin

      # 🔹 Detener y borrar el contenedor de manera segura
      - name: 🛑 Stop MongoDB Docker
        run: |
          if [ $(docker ps -a -q -f name=mongo-test) ]; then
            docker stop mongo-test
            docker rm mongo-test
          else
            echo "MongoDB container not found, skipping stop/removal."
          fi
